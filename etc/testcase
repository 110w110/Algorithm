

bool test(int blankIndex, int testNum){

    x_box = x/3*3
    y_box = y/3*3

    i=0~8 돌려서 [i][x]랑 [y][i]에 같은 값이 있으면서 같은 [y][x]자리 아니면 거짓 리턴
    y_box~ybox+3사이랑 x_box~x_box+3 사이에 같은 값이면서 같은 좌표 아니면 거짓 리턴

    for(i=0;i<9;i++){

        if(resultSudoku[i][x]==testNum&&y!=i)return false;
        if(resultSudoku[y][i]==testNum&&x!=i)return false;
    }
    for(i=y_Box;i<y_Box+3;i++){
        for(j=x_Box;j<x_Box+3;j++){
            if(resultSudoku[i][j]==testNum&&j!=x&&i!=y)return false;
        }
    }

    return true;   //test pass -> return 0
}

bool backTracking(int blankIndex){
    인덱스>=빈칸수 -> 탈출

    빈칸 좌표에 1~9까지 순서대로 넣어봄
        test(빈칸인덱스) -> 오류나면 다음으로 (모순되는지 확인)
        오류가 안나면 다음 빈칸인덱스 백트래킹(다음빈칸) 호출
        리턴값이 0이면 원래 인덱스로 복귀
        리턴값이 1이면 참값 리턴
    리턴 0

    int i=0;
    for(i=0;i<9;i++){       //1~9까지 숫자를 대입해본다
        if(test(blankIndex, i+1)){
            //일단 blank index번째는 i로 설정
            resultSudoku[blankAddr[0][blankIndex]][blankAddr[1][blankIndex]]=i+1;
            //일단 설정 해봤을 때 이후 과정들도 재귀적으로 확인하여 모순이 있는지 체크
            bool resultBackTracking=backTracking(blankIndex+1);
            if(!resultBackTracking){
                //blank index번째 다시 0으로 복귀
                resultSudoku[blankAddr[0][blankIndex]][blankAddr[1][blankIndex]]=0;
            }
            else{
                //return
                return true;
            }
        }

    }

    return 0;   //0이 리턴되었다면 완성이 안됐다는것
}


int main() {
    for(n=0;n<nTimes;n++){

        스도쿠판 세팅

        (x,y)가 0인 좌표 따로 저장해둠, 몇개인지 확인

        백트래킹(0) <-0은 빈칸좌표 인덱스 0번부터 시작

        if(backTracking(0)){cout << "sudoku " << n+1 << endl; printSudoku();}
    }

    fin.close();
}
