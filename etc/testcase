

bool test(int blankIndex, int testNum){

    x_box = x/3*3
    y_box = y/3*3

    i=0~8 돌려서 [i][x]랑 [y][i]에 같은 값이 있으면서 같은 [y][x]자리 아니면 거짓 리턴
    y_box~ybox+3사이랑 x_box~x_box+3 사이에 같은 값이면서 같은 좌표 아니면 거짓 리턴

    for(i=0;i<9;i++){

        if(resultSudoku[i][x]==testNum&&y!=i)return false;
        if(resultSudoku[y][i]==testNum&&x!=i)return false;
    }
    for(i=y_Box;i<y_Box+3;i++){
        for(j=x_Box;j<x_Box+3;j++){
            if(resultSudoku[i][j]==testNum&&j!=x&&i!=y)return false;
        }
    }

    return true;   //test pass -> return 0
}

bool backTracking(int blankIndex){
    인덱스>=빈칸수 -> 탈출

    빈칸 좌표에 1~9까지 순서대로 넣어봄
        test(빈칸인덱스) -> 오류나면 다음으로 (모순되는지 확인)
        오류가 안나면 다음 빈칸인덱스 백트래킹(다음빈칸) 호출
        리턴값이 0이면 원래 인덱스로 복귀
        리턴값이 1이면 참값 리턴
    리턴 0

    int i=0;
    for(i=0;i<9;i++){       //1~9까지 숫자를 대입해본다
        if(test(blankIndex, i+1)){
            //일단 blank index번째는 i로 설정
            resultSudoku[blankAddr[0][blankIndex]][blankAddr[1][blankIndex]]=i+1;
            //일단 설정 해봤을 때 이후 과정들도 재귀적으로 확인하여 모순이 있는지 체크
            bool resultBackTracking=backTracking(blankIndex+1);
            if(!resultBackTracking){
                //blank index번째 다시 0으로 복귀
                resultSudoku[blankAddr[0][blankIndex]][blankAddr[1][blankIndex]]=0;
            }
            else{
                //return
                return true;
            }
        }

    }

    return 0;   //0이 리턴되었다면 완성이 안됐다는것
}


int main() {
    for(n=0;n<nTimes;n++){

        스도쿠판 세팅

        (x,y)가 0인 좌표 따로 저장해둠, 몇개인지 확인

        백트래킹(0) <-0은 빈칸좌표 인덱스 0번부터 시작

        if(backTracking(0)){cout << "sudoku " << n+1 << endl; printSudoku();}
    }

    fin.close();
}



예제 입력 1
103000509
002109400
000704000
300502006
060000050
700803004
000401000
009205800
804000107
예제 출력 1
143628579
572139468
986754231
391542786
468917352
725863914
237481695
619275843
854396127



문제
RGB거리에는 집이 N개 있다.
거리는 선분으로 나타낼 수 있고,
1번 집부터 N번 집이 순서대로 있다.

집은 빨강, 초록, 파랑 중 하나의 색으로 칠해야 한다.
각각의 집을 빨강, 초록, 파랑으로 칠하는 비용이 주어졌을 때,
아래 규칙을 만족하면서 모든 집을 칠하는 비용의 최솟값을 구해보자.

1번 집의 색은 2번, N번 집의 색과 같지 않아야 한다.
N번 집의 색은 N-1번, 1번 집의 색과 같지 않아야 한다.
i(2 ≤ i ≤ N-1)번 집의 색은 i-1, i+1번 집의 색과 같지 않아야 한다.
입력
첫째 줄에 집의 수 N(2 ≤ N ≤ 1,000)이 주어진다.
둘째 줄부터 N개의 줄에는 각 집을 빨강, 초록, 파랑으로 칠하는 비용이 1번 집부터 한 줄에 하나씩 주어진다.
집을 칠하는 비용은 1,000보다 작거나 같은 자연수이다.

출력
첫째 줄에 모든 집을 칠하는 비용의 최솟값을 출력한다.

예제 입력 1
3
26 40 83
49 60 57
13 89 99
예제 출력 1
110
예제 입력 2
3
1 100 100
100 1 100
100 100 1
예제 출력 2
3
예제 입력 3
3
1 100 100
100 100 100
1 100 100
예제 출력 3
201
예제 입력 4
6
30 19 5
64 77 64
15 19 97
4 71 57
90 86 84
93 32 91
예제 출력 4
208
예제 입력 5
8
71 39 44
32 83 55
51 37 63
89 29 100
83 58 11
65 13 15
47 25 29
60 66 19
예제 출력 5
253



입력
첫째 줄에는 전체 용액의 수 N이 입력된다. N은 2 이상 100,000 이하의 정수이다. 둘째 줄에는 용액의 특성값을 나타내는 N개의 정수가 빈칸을 사이에 두고 오름차순으로 입력되며, 이 수들은 모두 -1,000,000,000 이상 1,000,000,000 이하이다. N개의 용액들의 특성값은 모두 서로 다르고, 산성 용액만으로나 알칼리성 용액만으로 입력이 주어지는 경우도 있을 수 있다.

출력
첫째 줄에 특성값이 0에 가장 가까운 용액을 만들어내는 두 용액의 특성값을 출력한다. 출력해야 하는 두 용액은 특성값의 오름차순으로 출력한다. 특성값이 0에 가장 가까운 용액을 만들어내는 경우가 두 개 이상일 경우에는 그 중 아무것이나 하나를 출력한다.

예제 입력 1
5
-99 -2 -1 4 98
예제 출력 1
-99 98
예제 입력 2
4
-100 -2 -1 103
예제 출력 2
-2 -1

7
-99 -2 -1 1 98 100 101

2
1000000000 1000000000
4
-100 -2 -1 10

2
999999999 1000000000

2
1000000000 1000000000